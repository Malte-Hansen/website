{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"A Software Visualization as a service (SVaaS) approach to facilitate program comprehension via collaboration. Getting started Demo","title":"Home"},{"location":"#_1","text":"A Software Visualization as a service (SVaaS) approach to facilitate program comprehension via collaboration. Getting started Demo","title":""},{"location":"1-getting-started/","text":"Getting started Quick start Below you can find instructions that will set up a demo of ExplorViz' frontend component with exemplary data, i.e., mocked backend and target application. You can also try out our hosted demo instance : 1. Clone the deployment repo and cd into the correct directory git clone https://github.com/ExplorViz/deployment.git cd deployment/frontend-demo/ 2. Use docker compose to start the software stack. The frontend will run on port 8080 . You can change all ports in the (hidden) .env file. docker compose up -d 3. Open http://localhost:8080 in your web browser, e.g. Mozilla Firefox. Visualize a Java application Instead of using the approach that is shown above, you can also start the complete software stack of ExplorViz to visualize and explore your desired Java application's runtime behavior. Below you can find instructions that will set up ExplorViz' complete software stack with a dynamically analyzed example application. Start ExplorViz 1. Clone the deployment repo and cd into the correct directory git clone https://github.com/ExplorViz/deployment.git cd deployment/docker/ 2. Use docker compose to start ExplorViz' software environment. docker compose -f docker-compose.environment.yml up -d 3. Use docker compose to start ExplorViz' services. The frontend is served via Nginx and by default runs on port 8080 . You can change ports and hostnames in the (hidden) .env file. docker compose -f docker-compose.explorviz.yml up -d 4. Open http://localhost:8080 in your web browser, e.g. Mozilla Firefox. 5. You will see a Software Landscape called \"Default Landscape\" in a table. Click on the info icon to see the Landscape Token 's (normally auto-generated) value and secret . This pair of data is used in the upcoming instrumentation configuration. With that, every incoming data record can be mapped to a user and the software landscape which is identified by the landscape token. Start the target Java application 1. cd into the example applications directory. We use the Spring PetClinic as an example for now. cd deployment/example-applications/petclinic-demo/ 2. Open the hidden .env file. Normally, this is the instrumentation configuration file where you would paste your token's value and secret . Since we use the default token for this instruction, you don't need that. 3. Use docker compose to start the PetClinic. docker compose up -d Explore the runtime behavior 1. Open http://localhost:18080 in your web browser and generate some load by clicking around. 2. Open http://localhost:8080 in your web browser and click the loop icon to open the visualization of the Spring PetClinics runtime behavior. 3. The visualization is updated every tenth second and shows the aggregated runtime behavior of the Spring PetClinic. 4. (Optional) Right click the white background to access the context menu. Here, you can find additional visualization approaches, e.g., virtual reality or augmented reality. 5. (Optional) Within the context menu you can also open the sidebar. There you will find visualization settings and the collaboration tab that enables you to join or host a collaborative session.","title":"Getting started"},{"location":"1-getting-started/#getting-started","text":"","title":"Getting started"},{"location":"1-getting-started/#quick-start","text":"Below you can find instructions that will set up a demo of ExplorViz' frontend component with exemplary data, i.e., mocked backend and target application. You can also try out our hosted demo instance : 1. Clone the deployment repo and cd into the correct directory git clone https://github.com/ExplorViz/deployment.git cd deployment/frontend-demo/ 2. Use docker compose to start the software stack. The frontend will run on port 8080 . You can change all ports in the (hidden) .env file. docker compose up -d 3. Open http://localhost:8080 in your web browser, e.g. Mozilla Firefox.","title":"Quick start"},{"location":"1-getting-started/#visualize-a-java-application","text":"Instead of using the approach that is shown above, you can also start the complete software stack of ExplorViz to visualize and explore your desired Java application's runtime behavior. Below you can find instructions that will set up ExplorViz' complete software stack with a dynamically analyzed example application.","title":"Visualize a Java application"},{"location":"1-getting-started/#start-explorviz","text":"1. Clone the deployment repo and cd into the correct directory git clone https://github.com/ExplorViz/deployment.git cd deployment/docker/ 2. Use docker compose to start ExplorViz' software environment. docker compose -f docker-compose.environment.yml up -d 3. Use docker compose to start ExplorViz' services. The frontend is served via Nginx and by default runs on port 8080 . You can change ports and hostnames in the (hidden) .env file. docker compose -f docker-compose.explorviz.yml up -d 4. Open http://localhost:8080 in your web browser, e.g. Mozilla Firefox. 5. You will see a Software Landscape called \"Default Landscape\" in a table. Click on the info icon to see the Landscape Token 's (normally auto-generated) value and secret . This pair of data is used in the upcoming instrumentation configuration. With that, every incoming data record can be mapped to a user and the software landscape which is identified by the landscape token.","title":"Start ExplorViz"},{"location":"1-getting-started/#start-the-target-java-application","text":"1. cd into the example applications directory. We use the Spring PetClinic as an example for now. cd deployment/example-applications/petclinic-demo/ 2. Open the hidden .env file. Normally, this is the instrumentation configuration file where you would paste your token's value and secret . Since we use the default token for this instruction, you don't need that. 3. Use docker compose to start the PetClinic. docker compose up -d","title":"Start the target Java application"},{"location":"1-getting-started/#explore-the-runtime-behavior","text":"1. Open http://localhost:18080 in your web browser and generate some load by clicking around. 2. Open http://localhost:8080 in your web browser and click the loop icon to open the visualization of the Spring PetClinics runtime behavior. 3. The visualization is updated every tenth second and shows the aggregated runtime behavior of the Spring PetClinic. 4. (Optional) Right click the white background to access the context menu. Here, you can find additional visualization approaches, e.g., virtual reality or augmented reality. 5. (Optional) Within the context menu you can also open the sidebar. There you will find visualization settings and the collaboration tab that enables you to join or host a collaborative session.","title":"Explore the runtime behavior"},{"location":"2-fundamentals/","text":"Fundamentals Conceptual design of our software visualization as a service approach To visualize multiple applications in a single software visualization, e.g., distributed software, users can group applications to form a user-owned software landscape (SL). A SL is empty when created (in ExplorViz' frontend) by its initiating user, but can be expanded with applications, which the user intends to visualize. For that, a SL is represented in ExplorViz by so-called landscape tokens (LT), i.e., a unique key-value pair that can be generated in our application. Users decide which of their applications form a specific SL. Applications can share a LT and will end up in the same SL, therefore in the same software visualization.","title":"Fundamentals"},{"location":"2-fundamentals/#fundamentals","text":"Conceptual design of our software visualization as a service approach To visualize multiple applications in a single software visualization, e.g., distributed software, users can group applications to form a user-owned software landscape (SL). A SL is empty when created (in ExplorViz' frontend) by its initiating user, but can be expanded with applications, which the user intends to visualize. For that, a SL is represented in ExplorViz by so-called landscape tokens (LT), i.e., a unique key-value pair that can be generated in our application. Users decide which of their applications form a specific SL. Applications can share a LT and will end up in the same SL, therefore in the same software visualization.","title":"Fundamentals"},{"location":"3-publications/","text":"Publications Below you can find a list of publications that are directly related to ExplorViz: Krause-Glau, A., Bader M. and Hasselbring, W. \u201d Collaborative Software Visualization for Program Comprehension \u201d. In: IEEE Working Conference on Software Visualization . 2022. In press. Krause-Glau, A. and Hasselbring, W. \u201d Scalable Collaborative Software Visualization as a Service \u201d. In: IEEE International Conference on Cloud Engineering . 2022. In press. Krause-Glau, A., Hansen M. and Hasselbring, W. \u201d Collaborative program comprehension via software visualization in extended reality \u201d. In: Information and Software Technology . 2022 Krause, A., Hansen M. and Hasselbring, W. \u201d Live Visualization of Dynamic Software Cities with Heat Map Overlays \u201d. In: IEEE Working Conference on Software Visualization . 2021 Hasselbring, W., Krause, A. and Zirkelbach, C. \u201d ExplorViz: Research on software visualization, comprehension and collaboration \u201d. In: Software Impacts . 2020. Krause, A., Zirkelbach, C., Hasselbring, W., Lenga, S. and Kr\u00f6ger, D. \u201d Microservice Decomposition via Static and Dynamic Analysis of the Monolith \u201d. In: IEEE International Conference on Software Architecture . 2020. Zirkelbach, C., Krause, A. and Hasselbring, W. \u201d The Collaborative Modularization and Reengineering Approach CORAL for Open Source Research Software \u201d. In: International Journal On Advances in Software . 2020. Zirkelbach, C., Krause, A. and Hasselbring, W. \u201d Modularization of Research Software for Collaborative Open Source Development \u201d In: International Conference on Advanced Collaborative Networks, Systems and Applications . 2019. Krause, A., Zirkelbach, C. and Hasselbring, W. \u201d Simplifying Software System Monitoring through Application Discovery with ExplorViz \u201d. In: Symposium on Software Performance . 2018. Zirkelbach, C., Krause, A. and Hasselbring, W. \u201d On the Modernization of ExplorViz towards a Microservice Architecture \u201d. In: Collaborative Workshop on Evolution and Maintenance of Long-Living Software Systems . 2018. Fittkau, F., Krause, A. and Hasselbring, W. \u201d Software landscape and application visualization for system comprehension with ExplorViz \u201d. In: Information and Software Technology. 2017. Zirkelbach, C. \u201d Juggling with Data: On the Lack of Database Monitoring in Long-Living Software Systems \u201d. In: Collaborative Workshop on Evolution and Maintenance of Long-Living Software Systems . 2017. Zirkelbach, C. and Adolf, M. \u201d An Elastic Layers Pattern Approach with Dynamically Added Layers \u201d. In: Symposium on Software Performance . 2016 Fittkau, F., Finke, S., Hasselbring, W. and Waller, J. \u201d Comparing Trace Visualizations for Program Comprehension through Controlled Experiments \u201d. In: IEEE International Conference on Program Comprehension . 2015. Fittkau, F. and Hasselbring, W. \u201d Elastic Application-Level Monitoring for Large Software Landscapes in the Cloud \u201d. In: European Conference on Service-Oriented and Cloud Computing . 2015. Fittkau, F., Koppenhagen, E. and Hasselbring, W. \u201d Research Perspective on Supporting Software Engineering via Physical 3D Models \u201d. In: IEEE Working Conference on Software Visualization . 2015. Fittkau, F., Krause, A. and Hasselbring, W. \u201d Exploring Software Cities in Virtual Reality \u201d. In: IEEE Working Conference on Software Visualization . 2015. Fittkau, F., Krause, A. and Hasselbring, W. \u201d Hierarchical Software Landscape Visualization for System Comprehension: A Controlled Experiment \u201d. In: IEEE Working Conference on Software Visualization . 2015. Fittkau, F., Roth, S. and Hasselbring, W. \u201d ExplorViz: Visual Runtime Behavior Analysis of Enterprise Application Landscapes \u201d. In: European Conference on Information Systems . 2015. Zirkelbach, C., Hasselbring, W. and Carr, L. \u201d Combining Kieker with Gephi for Performance Analysis and Interactive Trace Visualization \u201d. In: Symposium on Software Performance . 2015. Fittkau, F., Stelzer, P. and Hasselbring, W. \u201d Live Visualization of Large Software Landscapes for Ensuring Architecture Conformance \u201d. In: European Conference on Software Architecture Workshops . 2014. Fittkau, F., van Hoorn, A. and Hasselbring, W. \u201d Towards a Dependability Control Center for Large Software Landscapes \u201d. In: European Dependable Computing Conference . 2014. Fittkau, F., Waller, J., Brauer, P. C. and Hasselbring, W. \u201d Scalable and Live Trace Processing with Kieker Utilizing Cloud Computing \u201d. In: Symposium on Software Performance . 2013. Fittkau, F., Waller, J., Wulf, C. and Hasselbring, W. \u201c Live Trace Visualization for Comprehending Large Software Landscapes: The ExplorViz Approach \u201d. In: IEEE International Working Conference on Software Visualization . 2013.","title":"Publications"},{"location":"3-publications/#publications","text":"Below you can find a list of publications that are directly related to ExplorViz: Krause-Glau, A., Bader M. and Hasselbring, W. \u201d Collaborative Software Visualization for Program Comprehension \u201d. In: IEEE Working Conference on Software Visualization . 2022. In press. Krause-Glau, A. and Hasselbring, W. \u201d Scalable Collaborative Software Visualization as a Service \u201d. In: IEEE International Conference on Cloud Engineering . 2022. In press. Krause-Glau, A., Hansen M. and Hasselbring, W. \u201d Collaborative program comprehension via software visualization in extended reality \u201d. In: Information and Software Technology . 2022 Krause, A., Hansen M. and Hasselbring, W. \u201d Live Visualization of Dynamic Software Cities with Heat Map Overlays \u201d. In: IEEE Working Conference on Software Visualization . 2021 Hasselbring, W., Krause, A. and Zirkelbach, C. \u201d ExplorViz: Research on software visualization, comprehension and collaboration \u201d. In: Software Impacts . 2020. Krause, A., Zirkelbach, C., Hasselbring, W., Lenga, S. and Kr\u00f6ger, D. \u201d Microservice Decomposition via Static and Dynamic Analysis of the Monolith \u201d. In: IEEE International Conference on Software Architecture . 2020. Zirkelbach, C., Krause, A. and Hasselbring, W. \u201d The Collaborative Modularization and Reengineering Approach CORAL for Open Source Research Software \u201d. In: International Journal On Advances in Software . 2020. Zirkelbach, C., Krause, A. and Hasselbring, W. \u201d Modularization of Research Software for Collaborative Open Source Development \u201d In: International Conference on Advanced Collaborative Networks, Systems and Applications . 2019. Krause, A., Zirkelbach, C. and Hasselbring, W. \u201d Simplifying Software System Monitoring through Application Discovery with ExplorViz \u201d. In: Symposium on Software Performance . 2018. Zirkelbach, C., Krause, A. and Hasselbring, W. \u201d On the Modernization of ExplorViz towards a Microservice Architecture \u201d. In: Collaborative Workshop on Evolution and Maintenance of Long-Living Software Systems . 2018. Fittkau, F., Krause, A. and Hasselbring, W. \u201d Software landscape and application visualization for system comprehension with ExplorViz \u201d. In: Information and Software Technology. 2017. Zirkelbach, C. \u201d Juggling with Data: On the Lack of Database Monitoring in Long-Living Software Systems \u201d. In: Collaborative Workshop on Evolution and Maintenance of Long-Living Software Systems . 2017. Zirkelbach, C. and Adolf, M. \u201d An Elastic Layers Pattern Approach with Dynamically Added Layers \u201d. In: Symposium on Software Performance . 2016 Fittkau, F., Finke, S., Hasselbring, W. and Waller, J. \u201d Comparing Trace Visualizations for Program Comprehension through Controlled Experiments \u201d. In: IEEE International Conference on Program Comprehension . 2015. Fittkau, F. and Hasselbring, W. \u201d Elastic Application-Level Monitoring for Large Software Landscapes in the Cloud \u201d. In: European Conference on Service-Oriented and Cloud Computing . 2015. Fittkau, F., Koppenhagen, E. and Hasselbring, W. \u201d Research Perspective on Supporting Software Engineering via Physical 3D Models \u201d. In: IEEE Working Conference on Software Visualization . 2015. Fittkau, F., Krause, A. and Hasselbring, W. \u201d Exploring Software Cities in Virtual Reality \u201d. In: IEEE Working Conference on Software Visualization . 2015. Fittkau, F., Krause, A. and Hasselbring, W. \u201d Hierarchical Software Landscape Visualization for System Comprehension: A Controlled Experiment \u201d. In: IEEE Working Conference on Software Visualization . 2015. Fittkau, F., Roth, S. and Hasselbring, W. \u201d ExplorViz: Visual Runtime Behavior Analysis of Enterprise Application Landscapes \u201d. In: European Conference on Information Systems . 2015. Zirkelbach, C., Hasselbring, W. and Carr, L. \u201d Combining Kieker with Gephi for Performance Analysis and Interactive Trace Visualization \u201d. In: Symposium on Software Performance . 2015. Fittkau, F., Stelzer, P. and Hasselbring, W. \u201d Live Visualization of Large Software Landscapes for Ensuring Architecture Conformance \u201d. In: European Conference on Software Architecture Workshops . 2014. Fittkau, F., van Hoorn, A. and Hasselbring, W. \u201d Towards a Dependability Control Center for Large Software Landscapes \u201d. In: European Dependable Computing Conference . 2014. Fittkau, F., Waller, J., Brauer, P. C. and Hasselbring, W. \u201d Scalable and Live Trace Processing with Kieker Utilizing Cloud Computing \u201d. In: Symposium on Software Performance . 2013. Fittkau, F., Waller, J., Wulf, C. and Hasselbring, W. \u201c Live Trace Visualization for Comprehending Large Software Landscapes: The ExplorViz Approach \u201d. In: IEEE International Working Conference on Software Visualization . 2013.","title":"Publications"}]}